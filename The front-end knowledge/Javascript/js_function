1.页面加载到此处立即执行函数：
  (function(win){ })(this);

2.加载完页面之后，执行：
  $(function(){ })，是$(document).ready(function(){/*...*/})的简写形式，是在DOM加载完成后执行的回调函数，并且只会执行一次。
  参考博客：
  https://blog.csdn.net/stpice/article/details/80586444
  
3.js中函数定义格式：
 ①、普通型：function functionName(){ } 
           function functionName(a,b,c,...){ }
           function functionName(a,b,c,...){ return a+b+c+...; }
           
    调用： functionName();
          functionName(a,b,c,...);
          var param = functionName(a,b,c,...);
          
 
 ②、函数表达式：var functionName = function (a, b,...) {return a * b*...};
               var functionName = function () {return 1 * 2*...100 ;};
    
    调用：var param = functionName(a,b,...);
          var param = functionName();
          
          
 ③、构造器函数(构造方法)：var myFunction = new Function("a", "b", "return a * b");
    调用：var x = myFunction(4, 3);
    
 ④、自调用函数：
    在函数后跟一对小括号，函数将自动执行方法体，这样的函数叫自调用函数或立即执行函数。
     如：(function () {
             var x = "Hello!!";      //我会调用我自己
         })();
 ⑤、文档就绪函数：window.onload = function(){ }
       jquery中： $(function(){ }) 或者 $(ducment).ready(function(){}) 
       
 ⑥、箭头函数：没有function 关键字、return 关键字和花括号。
    如：const x = (x, y) => x * y;
    调用：x(x,y);
 

 
 
    备注：1、js变量类型是由值决定的，即先有值，再有变量类型。
         2、js函数参数，无固定类型，参数类型由调用者决定。
         3、函数表达式类型函数，又名匿名函数，因为函数没有自己的名称，在调用函数时和变量名共用同一名称。
         4、表达式型函数，不能再申明之前调用(即不具有函数提升性)。
         5.IE11 或更早的版本不支持箭头函数。
         
         
         
         
4.js函数用法注意点：
  ①、可用在表达式中
    如：function myFunction(a, b) {
           return a * b;
        }
        var x = myFunction(4, 3) * 2;
        
        
  ②、js的 typeof 运算符会为函数返回 "function"，但函数也是对象，
     arguments.length 会返回函数被调用时收到的参数个数；
     如：function myFunction(a, b) {
           return arguments.length;
         }  
         var x = myFunction(4, 3);
         此时x的值等于2
         
         
  ③、调用: functionName().toString(); 整个方法将以字符串的形式返回。
     
     
         
     
     
     
     
         
         
         
         
         
         
         
         
         
         
         
         
         
        
        
              
    
 
